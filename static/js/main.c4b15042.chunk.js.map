{"version":3,"sources":["img/charge.png","components/BatteryView.js","components/OtherInfo.js","App.js","reportWebVitals.js","index.js"],"names":["BatteryView","props","pisCharging","isCharging","pbatteryLevel","batteryLevel","state","isFullCharged","className","id","style","backgroundColor","this","min","max","value","zIndex","src","chargeLogo","React","Component","OtherInfo","console","log","lastChargingTime","returnTime","myDate","Date","mylastChargingTime","getDay","getMonth","getFullYear","getHours","getMinutes","getSeconds","App","updateData","bind","myInterval","setInterval","navigator","getBattery","then","battery","bLevel","Math","floor","level","setState","charging","disChargingTime","lastCharginTime","dischargingTime","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4b15042.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/charge.5311357a.png\";","import React from 'react';\nimport BatteryLogo from './../img/battery-logo.png';\nimport './../css/BatteryView.css';\nimport chargeLogo from './../img/charge.png'\nclass BatteryView extends React.Component{\n    constructor(props){\n        super(props);\n        let pisCharging = this.props.isCharging;\n        let pbatteryLevel = this.props.batteryLevel;\n        this.state = {\n            batteryLevel: pbatteryLevel,\n            isCharging : pisCharging,\n            isFullCharged : 'rgb(241, 241, 241);'\n        };\n\n        \n    }\n\n\n    render(){\n        return(\n            <div className=\"inBatteryView\">\n                <div className=\"logoView\" id=\"logoView\" >\n                    <div id=\"batterySymbol\" className=\"batterySymbol\">\n                        <div id=\"downCell\" className=\"downCell\">\n                            <div id=\"upperCell\" className=\"upperCell\" style={{backgroundColor: this.props.isFullCharged}}></div> \n                            <progress min=\"0\" max=\"99\" value={this.props.batteryLevel} className=\"batteryProgress\" id=\"batteryProgress\" style={{zIndex : this.props.isCharging}}/>\n                            <img src={chargeLogo} id=\"chargeImage\" className=\"chargeLogo\" />\n\n                        </div>\n                    </div>\n                </div>\n                <div className=\"info\">\n                    <div className=\"chargePercent\">\n                        <h1><span id=\"chargedAmount\" className=\"chargedAmount\">{this.props.batteryLevel}</span><span className=\"cAmount\">%</span></h1>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n}\n\nexport default BatteryView;\n\n","import React from 'react';\nimport './../css/OtherInfo.css';\n\n\nclass OtherInfo extends React.Component{\n    constructor(props){\n        super(props);\n        console.log(this.props.lastChargingTime);\n    }\n\n    componentDidUpdate(){\n        this.returnTime();\n    }\n    \n    returnTime(){\n         let myDate = new Date(this.props.lastChargingTime);\n         let mylastChargingTime = myDate.getDay() + \"/\" + myDate.getMonth() + \"/\" + myDate.getFullYear() + \"||\" + myDate.getHours() +\":\" + myDate.getMinutes() + \":\" +myDate.getSeconds() ;\n        console.log(mylastChargingTime);\n        return mylastChargingTime;\n    }\n\n    render(){\n        return(\n            <div className=\"otherInfo\">\n                <div className=\"lastChargingTime\">\n                    <h1>\n                        Last Charging Time  : {this.returnTime()}\n                    </h1>\n                </div>\n                 <div className=\"LastDischargingTime\">\n                </div> \n            </div>\n        );\n    }\n}\n\nexport default OtherInfo;","import React from 'react'\nimport BatteryView from './components/BatteryView';\nimport './App.css';\nimport OtherInfo from './components/OtherInfo';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props); \n    this.state={\n      batteryLevel : 0,\n      isCharging: 2,\n      isFullCharged : 'rgb(241, 241, 241)',\n      lastChargingTime : 0\n    } \n\n    this.updateData = this.updateData.bind(this);\n  }\n\n  \n  componentDidMount(){\n    this.myInterval = setInterval(this.updateData,2000);\n  }\n\n  updateData(){\n    navigator.getBattery().then((battery) =>{\n      let bLevel = Math.floor(battery.level * 100);\n      this.setState({batteryLevel:bLevel});\n      \n      //for full charging indicator\n      if(bLevel > 99){\n        this.setState({isFullCharged : 'blue'});\n      }else{\n        this.setState({isFullCharged : 'rgb(241, 241, 241)'});\n      }\n\n\n\n      //for charging symbol\n      if(battery.charging){\n        this.setState({isCharging : 0})\n      }else{\n        this.setState({isCharging : 2})\n      }\n\n      //set last charging Time\n      if(battery.disChargingTime != \"Infinity\"){\n        let lastCharginTime = battery.dischargingTime;\n        this.setState({lastChargingTime : lastCharginTime})\n      }\n    });\n\n\n  }  \n  \n  render(){\n    return (\n      <div className=\"App\" id=\"app\">\n        <div className=\"batteryView\">\n          <BatteryView  batteryLevel={this.state.batteryLevel} isCharging={this.state.isCharging} isFullCharged={this.state.isFullCharged}/>\n        </div>\n        <div className=\"otherInfo\">\n          <OtherInfo lastChargingTime={this.state.lastChargingTime}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}